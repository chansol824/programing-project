#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
from std_msgs.msg import Int32, Bool
import math
import statistics

class Class_Name:
    def __init__(self):
        rospy.init_node("obs_detect_node")

        rospy.Subscriber("/scan", LaserScan, self.lidar_CB)

        self.pub_dist90_R = rospy.Publisher("/dist90R", Int32, queue_size=1)
        self.pub_dist90_L = rospy.Publisher("/dist90L", Int32, queue_size=1)
        self.pub_dist45_R = rospy.Publisher("/dist45R", Int32, queue_size=1)
        self.pub_dist45_L = rospy.Publisher("/dist45L", Int32, queue_size=1)
        self.pub_obs_R = rospy.Publisher("/obsR", Bool, queue_size=1)
        self.pub_obs_L = rospy.Publisher("/obsL", Bool, queue_size=1)
        self.pub_obs_C = rospy.Publisher("/obsC", Bool, queue_size=1)

        self.laser_msg = LaserScan()
        self.rate = rospy.Rate(10)
        self.laser_flag = False
        self.degrees = []
        self.degrees_flag = False
        self.ctrl_msg = Twist()  # Twist 메시지 초기화

    def lidar_CB(self, msg):
        if msg:  # 유효한 메시지가 들어왔을 경우:
            self.laser_msg = msg
            self.laser_flag = True
        else:
            self.laser_flag = False

    def sense(self):
        pub_dist90_R_list = []
        pub_dist90_L_list = []
        pub_dist45_R_list = []
        pub_dist45_L_list = []
        pub_obs_R_list = []
        pub_obs_L_list = []
        pub_obs_C_list = []

        if self.laser_flag:
            if not self.degrees_flag:
                for i in range(len(self.laser_msg.ranges)):
                    angle = (self.laser_msg.angle_min + self.laser_msg.angle_increment * i) * 180 / math.pi
                    self.degrees.append(angle)
                self.degrees_flag = True

            for i, n in enumerate(self.laser_msg.ranges):  # self.laser_msg.ranges 사용
                x = n * math.cos(self.degrees[i] * math.pi / 180)
                y = n * math.sin(self.degrees[i] * math.pi / 180)

                if 0.15 < y < 0.45 and 0 < x < 0.5:
                    pub_obs_R_list.append(n)
                if -0.15 < y < 0.15 and 0 < x < 0.5:
                    pub_obs_C_list.append(n)
                if -0.45 < y < -0.15 and 0 < x < 0.5:
                    pub_obs_L_list.append(n)

                if 0 < n < 0.5 and -91 < self.degrees[i] < -89:
                    pub_dist90_R_list.append(n)
                if 0 < n < 0.5 and -46 < self.degrees[i] < -44:
                    pub_dist45_R_list.append(n)
                if 0 < n < 0.5 and 89 < self.degrees[i] < 91:
                    pub_dist90_L_list.append(n)
                if 0 < n < 0.5 and 44 < self.degrees[i] < 46:
                    pub_dist45_L_list.append(n)

            if pub_dist90_R_list:
                self.pub_dist90_R.publish(int(statistics.mean(pub_dist90_R_list) * 100))
            else:
                self.pub_dist90_R.publish(50)
            if pub_dist45_R_list:
                self.pub_dist45_R.publish(int(statistics.mean(pub_dist45_R_list) * 100))
            else:
                self.pub_dist45_R.publish(50)
            if pub_dist90_L_list:
                self.pub_dist90_L.publish(int(statistics.mean(pub_dist90_L_list) * 100))
            else:
                self.pub_dist90_L.publish(50)
            if pub_dist45_L_list:
                self.pub_dist45_L.publish(int(statistics.mean(pub_dist45_L_list) * 100))
            else:
                self.pub_dist45_L.publish(50)

            if len(pub_obs_R_list) > 3:
                self.pub_obs_R.publish(True)
            else:
                self.pub_obs_R.publish(False)
            if len(pub_obs_C_list) > 3:
                self.pub_obs_C.publish(True)
            else:
                self.pub_obs_C.publish(False)
            if len(pub_obs_L_list) > 3:
                self.pub_obs_L.publish(True)
            else:
                self.pub_obs_L.publish(False)

    def think(self, degrees):
        object_degrees = []
        for i, value in enumerate(self.laser_msg.ranges):
            if 0 < value < 0.30 and abs(degrees[i]) < 30:
                object_degrees.append(degrees[i])
        if len(object_degrees) > 3:
            motion = "STOP"
        else:
            motion = "GO"
        return motion

    def act(self, motion):
        if motion == "STOP":
            speed = 0
        else:
            speed = 1
        self.ctrl_msg.linear.x = speed
        self.pub.publish(self.ctrl_msg)

    def run(self):
        if self.laser_flag:
            self.sense()

def main():
    class_name = Class_Name()
    while not rospy.is_shutdown():
        class_name.run()
        class_name.rate.sleep()  # 루프의 각 반복에서 sleep 추가

if __name__ == "__main__":
    main()
